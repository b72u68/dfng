Object code


 Code 
 Translation 
 Compiler 
 Compile-time 
 Optimizing compiler 
 Intermediate representation  (IR) 
 Execution 
 Runtime system 
 Runtime 
 Executable 
 Interpreter 
 Virtual machine Source code 
 Object code 
 Bytecode 
 Machine code 
 Microcode Just-in-time  (JIT)
 Tracing just-in-time 
 Ahead-of-time  (AOT) 
 Transcompilation 
 Recompilation Android Runtime  (ART) 
 Common Language Runtime  (CLR) and  Mono 
 crt0 
 Java virtual machine  (JVM) 
 Objective-C  and  Swift 
 V8  and  Node.js 
 CPython  and  PyPy 
 Zend Engine  (PHP) GNU Compiler Collection  (GCC) 
 LLVM  and  Clang v t e In  computing ,  object code  or  object module  is the product of a  compiler . [1] 
 In a general sense object code is a sequence of  statements  or instructions in a computer language, [2]  usually a  machine code  language (i.e.,  binary ) or an intermediate language such as  register transfer language  (RTL). The term indicates that the code is the  goal  or result of the compiling process, with some early sources referring to source code as a "subject program".
 Details [ edit ] Object files  can in turn be  linked  to form an  executable file  or  library file . In order to be used, object code must either be placed in an executable file, a library file, or an object file.
 Object code is a portion of machine code that has not yet been linked into a complete program. It is the machine code for one particular library or module that will make up the completed product. It may also contain placeholders or offsets, not found in the machine code of a completed program, that the linker will use to connect everything together. Whereas machine code is binary code that can be executed directly by the CPU, object code has the jumps partially parametrized so that a linker can fill them in.
 An  assembler  is used to convert  assembly code  into machine code (object code). A linker links several object (and library) files to generate an executable. Assemblers can also assemble directly to machine code executable files without the object intermediary step.
 References [ edit ] v t e Alignment 
 Calling convention 
 Call stack 
 Library 
 static 
 Machine code 
 Memory segmentation 
 Name mangling 
 Object code 
 Opaque pointer 
 Position-independent code 
 Relocation 
 System call 
 Virtual method table Binary-code compatibility 
 Foreign function interface 
 Language binding 
 Linker 
 dynamic 
 Loader 
 Year 2038 problem Machine code Articles with short description Short description is different from Wikidata Use dmy dates from July 2012 Navigation menu Not logged in Talk Contributions Create account Log in Article Talk Read Edit View history 
				 Search 
			 Main page Contents Current events Random article About Wikipedia Contact us Donate Help Learn to edit Community portal Recent changes Upload file What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Download as PDF Printable version Català Čeština Deutsch Eesti Español فارسی Français Galego 한국어 Հայերեն Hornjoserbsce Hrvatski Bahasa Indonesia Italiano Қазақша Bahasa Melayu Nederlands 日本語 Polski Português Русский Српски / srpski Suomi Svenska Tiếng Việt 粵語 中文 
	  This page was last edited on 20 October 2021, at 04:16  (UTC) . 
	 Text is available under the  Creative Commons Attribution-ShareAlike License 3.0 ;
additional terms may apply.  By using this site, you agree to the  Terms of Use  and  Privacy Policy . Wikipedia® is a registered trademark of the  Wikimedia Foundation, Inc. , a non-profit organization. 
 
	 Privacy policy 
	 About Wikipedia 
	 Disclaimers 
	 Contact Wikipedia 
	 Mobile view 
	 Developers 
	 Statistics 
	 Cookie statement 
 
	 
	 
