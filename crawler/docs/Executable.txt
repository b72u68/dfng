Executable



 Code 
 Translation 
 Compiler 
 Compile-time 
 Optimizing compiler 
 Intermediate representation  (IR) 
 Execution 
 Runtime system 
 Runtime 
 Executable 
 Interpreter 
 Virtual machine Source code 
 Object code 
 Bytecode 
 Machine code 
 Microcode Just-in-time  (JIT)
 Tracing just-in-time 
 Ahead-of-time  (AOT) 
 Transcompilation 
 Recompilation Android Runtime  (ART) 
 Common Language Runtime  (CLR) and  Mono 
 crt0 
 Java virtual machine  (JVM) 
 Objective-C  and  Swift 
 V8  and  Node.js 
 CPython  and  PyPy 
 Zend Engine  (PHP) GNU Compiler Collection  (GCC) 
 LLVM  and  Clang v t e In  computing ,  executable code , an  executable file , or an  executable program , sometimes simply referred to as an  executable  or  binary , causes a computer "to perform indicated tasks according to encoded  instructions ", [1]  as opposed to a  data file  that must be interpreted ( parsed ) by a program to be meaningful. 
 The exact interpretation depends upon the use. "Instructions" is traditionally taken to mean  machine code  instructions for a physical  CPU . [2]  In some contexts, a file containing scripting instructions (such as  bytecode ) may also be considered executable.
 Contents 
 1   Generation of executable files 
 2   Execution 
 3   See also 
 4   References 
 5   External links 
 Generation of executable files [ edit ] Executable files can be hand-coded in machine language, although it is far more convenient to develop software as  source code  in a  high-level language  that can be easily understood by humans. In some cases, source code might be specified in  assembly language  instead, which remains human-readable while being closely associated with machine code instructions.
 The high-level language is  compiled  into either an executable machine code file or a non-executable machine code –  object file  of some sort; the equivalent process on assembly language source code is called  assembly . Several object files are  linked  to create the executable. Object files -- executable or not -- are typically stored in a  container format , such as  Executable and Linkable Format  (ELF) or  Portable Executable  (PE) which is  operating system -specific. [3]  This gives structure to the generated machine code, for example dividing it into sections such as  .text  (executable code),  .data  (initialized global and static variables), and  .rodata  (read-only data, such as constants and strings).
 Executable files typically also include a  runtime system , which implements runtime language features (such as  task scheduling ,  exception handling , calling static constructors and destructors, etc.) and interactions with the operating system, notably passing arguments, environment, and returning an  exit status , together with other startup and shutdown features such as releasing resources like  file handles . For C, this is done by linking in the  crt0  object, which contains the actual entry point and does setup and shutdown by calling the  runtime library . [4] 
 Executable files thus normally contain significant additional machine code beyond that directly generated from the specific source code. In some cases, it is desirable to omit this, for example for embedded systems development, or simply to understand how compilation, linking, and loading work. In C, this can be done by omitting the usual runtime, and instead explicitly specifying a linker script, which generates the entry point and handles startup and shutdown, such as calling  main  to start and returning exit status to the kernel at the end. [5] 
 Execution [ edit ] In order to be executed by the system (such as an operating system,  firmware , or  boot loader ), an executable file must conform to the system's  application binary interface  (ABI). [6]  In simple interfaces, a file is executed by loading it into memory and jumping to the start of the address space and executing from there. In more complicated interfaces, executable files have additional metadata specifying a separate  entry point . For example, in ELF, the entry point is specified in the header's  e_entry  field, which specifies the (virtual) memory address at which to start execution. In the GCC ( GNU Compiler Collection ) this field is set by the linker based on the  _start  symbol.
 See also [ edit ] Comparison of executable file formats 
 Executable compression 
 Executable text References [ edit ] External links [ edit ] EXE File Format  at What Is v t e a.out 
 AIF 
 COFF 
 CMD 
 COM 
 ECOFF 
 ELF 
 GOFF 
 Hunk 
 Mach-O 
 MZ 
 NE 
 OMF 
 OS/360 
 PE 
 PEF 
 X 
 XCOFF Comparison of formats 
 .exe Computer file systems Programming language implementation Articles with short description Short description is different from Wikidata Use dmy dates from December 2021 Use list-defined references from December 2021 Navigation menu Not logged in Talk Contributions Create account Log in Article Talk Read Edit View history 
				 Search 
			 Main page Contents Current events Random article About Wikipedia Contact us Donate Help Learn to edit Community portal Recent changes Upload file What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Download as PDF Printable version العربية Български Bosanski Català Čeština Deutsch Ελληνικά Español Esperanto فارسی Français 한국어 Hrvatski Italiano עברית Қазақша Монгол Nederlands 日本語 Norsk bokmål Polski Português Română Русский Simple English Slovenčina Slovenščina Српски / srpski Suomi Svenska ไทย Türkçe Українська Tiếng Việt 粵語 中文 
	  This page was last edited on 18 March 2022, at 20:38  (UTC) . 
	 Text is available under the  Creative Commons Attribution-ShareAlike License 3.0 ;
additional terms may apply.  By using this site, you agree to the  Terms of Use  and  Privacy Policy . Wikipedia® is a registered trademark of the  Wikimedia Foundation, Inc. , a non-profit organization. 
 
	 Privacy policy 
	 About Wikipedia 
	 Disclaimers 
	 Contact Wikipedia 
	 Mobile view 
	 Developers 
	 Statistics 
	 Cookie statement 
 
	 
	 
